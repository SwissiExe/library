name: Database Backup

on:
  push:
    branches: [ master ]

jobs:
  backup:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      # Login to Docker Hub (replace with your credentials)
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      # Start the database container (assuming it's defined in docker-docker-compose.yml)
      - name: Start database container
        run: ./database/docker-compose up -d mysql

      # Wait for the database to be ready (adjust timeout as needed)
      - name: Wait for database
        run: |
          for i in {1..10}; do
            if docker exec ${{ secrets.DB_NAME }} mysql -u test -ptest 1234 -h "localhost" -P 3306 -e "SELECT 1"; then
              echo "Database is ready"
              exit 0
            fi
            echo "Waiting for database to be ready..."
            sleep 5
          done
          echo "Database is not ready after 50 seconds, failing..."
          exit 1

      # Dump the database
      - name: Dump database
        run: docker exec ${{ secrets.DB_NAME }} mysqldump -u test -ptest 1234 ${{ secrets.DB_NAME }} > database_backup.sql

      # Stop the database container
      - name: Stop database container
        run: docker-compose down

      # Create a new image with the backup
      - name: Create backup image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DB_REPO_NAME }}:latest .

      # Push the backup image to Docker Hub
      - name: Push backup image
        run: docker push ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DB_REPO_NAME }}:latest


  pull-from-docker-hub-and-push-to-ecr:
    runs-on: ubuntu-latest
    needs: backup
    steps:
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Log in to Amazon ECR
        id: login-pf-aws-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          registry-type: public

      - name: Pull Docker Image from Docker Hub
        env:
          DOCKER_HUB_REPO: ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DB_REPO_NAME }}
          IMAGE_TAG: latest
        run: |
          echo "Pulling the Docker image from Docker Hub..."
          docker pull $DOCKER_HUB_REPO:$IMAGE_TAG

      - name: Tag and Push Docker Image to Amazon ECR
        env:
          ECR_REGISTRY: public.ecr.aws/r9f0w2i7
          ECR_REPOSITORY: librarydatabase
          DOCKER_HUB_REPO: ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DB_REPO_NAME }}
          IMAGE_TAG: latest
        run: |
          echo "Tagging the Docker image..."
          docker tag $DOCKER_HUB_REPO:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "Pushing the Docker image to Amazon ECR..."
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
